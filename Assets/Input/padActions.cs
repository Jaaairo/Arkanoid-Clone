//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/padActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PadActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PadActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""padActions"",
    ""maps"": [
        {
            ""name"": ""PadActionMap"",
            ""id"": ""f04ba826-3969-41bb-95b3-9ad41124783e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ebe26408-5cf8-4158-878a-ae4c98f7a350"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""buttonMods"",
                    ""type"": ""Button"",
                    ""id"": ""70d2aa16-8b20-4455-ba67-86b777354b30"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""ac10f6fe-5521-4186-a9d8-425cfb6ef2d1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""6d9f33f0-ceb0-4bcb-87f2-80becc0fa690"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""10843f2f-a87f-45ca-9477-97145f75650a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""gamepad"",
                    ""id"": ""cf761546-31ca-4c00-81b0-cfd9f6768493"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""05ca8e54-370c-41cd-ba7f-f59e1e0d8b75"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""98308e26-614b-4a8e-87be-b8f86f3283dc"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""9455270b-abae-4328-9391-2afde8a31667"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""076fbf9c-cfe4-46d8-90a1-31958b5a7fd3"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""297e51af-f65a-4a6b-a409-c32a37a2d3a7"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""buttonMods"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""864af10e-b4b7-411b-916e-3c83d399754a"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""buttonMods"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6e4f54a-ea8c-4d2d-84a1-ad1c09063aff"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""buttonMods"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PadActionMap
        m_PadActionMap = asset.FindActionMap("PadActionMap", throwIfNotFound: true);
        m_PadActionMap_Move = m_PadActionMap.FindAction("Move", throwIfNotFound: true);
        m_PadActionMap_buttonMods = m_PadActionMap.FindAction("buttonMods", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PadActionMap
    private readonly InputActionMap m_PadActionMap;
    private IPadActionMapActions m_PadActionMapActionsCallbackInterface;
    private readonly InputAction m_PadActionMap_Move;
    private readonly InputAction m_PadActionMap_buttonMods;
    public struct PadActionMapActions
    {
        private @PadActions m_Wrapper;
        public PadActionMapActions(@PadActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PadActionMap_Move;
        public InputAction @buttonMods => m_Wrapper.m_PadActionMap_buttonMods;
        public InputActionMap Get() { return m_Wrapper.m_PadActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PadActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IPadActionMapActions instance)
        {
            if (m_Wrapper.m_PadActionMapActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PadActionMapActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PadActionMapActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PadActionMapActionsCallbackInterface.OnMove;
                @buttonMods.started -= m_Wrapper.m_PadActionMapActionsCallbackInterface.OnButtonMods;
                @buttonMods.performed -= m_Wrapper.m_PadActionMapActionsCallbackInterface.OnButtonMods;
                @buttonMods.canceled -= m_Wrapper.m_PadActionMapActionsCallbackInterface.OnButtonMods;
            }
            m_Wrapper.m_PadActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @buttonMods.started += instance.OnButtonMods;
                @buttonMods.performed += instance.OnButtonMods;
                @buttonMods.canceled += instance.OnButtonMods;
            }
        }
    }
    public PadActionMapActions @PadActionMap => new PadActionMapActions(this);
    public interface IPadActionMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnButtonMods(InputAction.CallbackContext context);
    }
}
